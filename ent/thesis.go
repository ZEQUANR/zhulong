// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/ZEQUANR/zhulong/ent/thesis"
	"github.com/ZEQUANR/zhulong/ent/user"
)

// Thesis is the model entity for the Thesis schema.
type Thesis struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Time holds the value of the "time" field.
	Time time.Time `json:"time,omitempty"`
	// URL holds the value of the "url" field.
	URL string `json:"url,omitempty"`
	// Type holds the value of the "type" field.
	Type int `json:"type,omitempty"`
	// Status holds the value of the "status" field.
	Status int `json:"status,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ThesisQuery when eager-loading is set.
	Edges        ThesisEdges `json:"edges"`
	user_files   *int
	selectValues sql.SelectValues
}

// ThesisEdges holds the relations/edges for other nodes in the graph.
type ThesisEdges struct {
	// Uploaders holds the value of the uploaders edge.
	Uploaders *User `json:"uploaders,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UploadersOrErr returns the Uploaders value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ThesisEdges) UploadersOrErr() (*User, error) {
	if e.Uploaders != nil {
		return e.Uploaders, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "uploaders"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Thesis) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case thesis.FieldID, thesis.FieldType, thesis.FieldStatus:
			values[i] = new(sql.NullInt64)
		case thesis.FieldName, thesis.FieldURL:
			values[i] = new(sql.NullString)
		case thesis.FieldTime:
			values[i] = new(sql.NullTime)
		case thesis.ForeignKeys[0]: // user_files
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Thesis fields.
func (t *Thesis) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case thesis.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			t.ID = int(value.Int64)
		case thesis.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				t.Name = value.String
			}
		case thesis.FieldTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field time", values[i])
			} else if value.Valid {
				t.Time = value.Time
			}
		case thesis.FieldURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field url", values[i])
			} else if value.Valid {
				t.URL = value.String
			}
		case thesis.FieldType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				t.Type = int(value.Int64)
			}
		case thesis.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				t.Status = int(value.Int64)
			}
		case thesis.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_files", value)
			} else if value.Valid {
				t.user_files = new(int)
				*t.user_files = int(value.Int64)
			}
		default:
			t.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Thesis.
// This includes values selected through modifiers, order, etc.
func (t *Thesis) Value(name string) (ent.Value, error) {
	return t.selectValues.Get(name)
}

// QueryUploaders queries the "uploaders" edge of the Thesis entity.
func (t *Thesis) QueryUploaders() *UserQuery {
	return NewThesisClient(t.config).QueryUploaders(t)
}

// Update returns a builder for updating this Thesis.
// Note that you need to call Thesis.Unwrap() before calling this method if this Thesis
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Thesis) Update() *ThesisUpdateOne {
	return NewThesisClient(t.config).UpdateOne(t)
}

// Unwrap unwraps the Thesis entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (t *Thesis) Unwrap() *Thesis {
	_tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Thesis is not a transactional entity")
	}
	t.config.driver = _tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Thesis) String() string {
	var builder strings.Builder
	builder.WriteString("Thesis(")
	builder.WriteString(fmt.Sprintf("id=%v, ", t.ID))
	builder.WriteString("name=")
	builder.WriteString(t.Name)
	builder.WriteString(", ")
	builder.WriteString("time=")
	builder.WriteString(t.Time.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("url=")
	builder.WriteString(t.URL)
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", t.Type))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", t.Status))
	builder.WriteByte(')')
	return builder.String()
}

// Theses is a parsable slice of Thesis.
type Theses []*Thesis
