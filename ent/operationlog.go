// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/ZEQUANR/zhulong/ent/operationlog"
	"github.com/ZEQUANR/zhulong/ent/user"
)

// OperationLog is the model entity for the OperationLog schema.
type OperationLog struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Status holds the value of the "status" field.
	Status int `json:"status,omitempty"`
	// Context holds the value of the "context" field.
	Context string `json:"context,omitempty"`
	// Time holds the value of the "time" field.
	Time time.Time `json:"time,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the OperationLogQuery when eager-loading is set.
	Edges                 OperationLogEdges `json:"edges"`
	user_operating_record *int
	selectValues          sql.SelectValues
}

// OperationLogEdges holds the relations/edges for other nodes in the graph.
type OperationLogEdges struct {
	// Operator holds the value of the operator edge.
	Operator *User `json:"operator,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// OperatorOrErr returns the Operator value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OperationLogEdges) OperatorOrErr() (*User, error) {
	if e.Operator != nil {
		return e.Operator, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "operator"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*OperationLog) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case operationlog.FieldID, operationlog.FieldStatus:
			values[i] = new(sql.NullInt64)
		case operationlog.FieldName, operationlog.FieldContext:
			values[i] = new(sql.NullString)
		case operationlog.FieldTime:
			values[i] = new(sql.NullTime)
		case operationlog.ForeignKeys[0]: // user_operating_record
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the OperationLog fields.
func (ol *OperationLog) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case operationlog.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ol.ID = int(value.Int64)
		case operationlog.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				ol.Name = value.String
			}
		case operationlog.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				ol.Status = int(value.Int64)
			}
		case operationlog.FieldContext:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field context", values[i])
			} else if value.Valid {
				ol.Context = value.String
			}
		case operationlog.FieldTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field time", values[i])
			} else if value.Valid {
				ol.Time = value.Time
			}
		case operationlog.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_operating_record", value)
			} else if value.Valid {
				ol.user_operating_record = new(int)
				*ol.user_operating_record = int(value.Int64)
			}
		default:
			ol.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the OperationLog.
// This includes values selected through modifiers, order, etc.
func (ol *OperationLog) Value(name string) (ent.Value, error) {
	return ol.selectValues.Get(name)
}

// QueryOperator queries the "operator" edge of the OperationLog entity.
func (ol *OperationLog) QueryOperator() *UserQuery {
	return NewOperationLogClient(ol.config).QueryOperator(ol)
}

// Update returns a builder for updating this OperationLog.
// Note that you need to call OperationLog.Unwrap() before calling this method if this OperationLog
// was returned from a transaction, and the transaction was committed or rolled back.
func (ol *OperationLog) Update() *OperationLogUpdateOne {
	return NewOperationLogClient(ol.config).UpdateOne(ol)
}

// Unwrap unwraps the OperationLog entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ol *OperationLog) Unwrap() *OperationLog {
	_tx, ok := ol.config.driver.(*txDriver)
	if !ok {
		panic("ent: OperationLog is not a transactional entity")
	}
	ol.config.driver = _tx.drv
	return ol
}

// String implements the fmt.Stringer.
func (ol *OperationLog) String() string {
	var builder strings.Builder
	builder.WriteString("OperationLog(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ol.ID))
	builder.WriteString("name=")
	builder.WriteString(ol.Name)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", ol.Status))
	builder.WriteString(", ")
	builder.WriteString("context=")
	builder.WriteString(ol.Context)
	builder.WriteString(", ")
	builder.WriteString("time=")
	builder.WriteString(ol.Time.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// OperationLogs is a parsable slice of OperationLog.
type OperationLogs []*OperationLog
