// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/ZEQUANR/zhulong/ent/students"
)

// Students is the model entity for the Students schema.
type Students struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// College holds the value of the "college" field.
	College string `json:"college,omitempty"`
	// Phone holds the value of the "phone" field.
	Phone string `json:"phone,omitempty"`
	// Subject holds the value of the "subject" field.
	Subject string `json:"subject,omitempty"`
	// Class holds the value of the "class" field.
	Class string `json:"class,omitempty"`
	// Identity holds the value of the "identity" field.
	Identity     string `json:"identity,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Students) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case students.FieldID:
			values[i] = new(sql.NullInt64)
		case students.FieldName, students.FieldCollege, students.FieldPhone, students.FieldSubject, students.FieldClass, students.FieldIdentity:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Students fields.
func (s *Students) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case students.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			s.ID = int(value.Int64)
		case students.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				s.Name = value.String
			}
		case students.FieldCollege:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field college", values[i])
			} else if value.Valid {
				s.College = value.String
			}
		case students.FieldPhone:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field phone", values[i])
			} else if value.Valid {
				s.Phone = value.String
			}
		case students.FieldSubject:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field subject", values[i])
			} else if value.Valid {
				s.Subject = value.String
			}
		case students.FieldClass:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field class", values[i])
			} else if value.Valid {
				s.Class = value.String
			}
		case students.FieldIdentity:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field identity", values[i])
			} else if value.Valid {
				s.Identity = value.String
			}
		default:
			s.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Students.
// This includes values selected through modifiers, order, etc.
func (s *Students) Value(name string) (ent.Value, error) {
	return s.selectValues.Get(name)
}

// Update returns a builder for updating this Students.
// Note that you need to call Students.Unwrap() before calling this method if this Students
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Students) Update() *StudentsUpdateOne {
	return NewStudentsClient(s.config).UpdateOne(s)
}

// Unwrap unwraps the Students entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Students) Unwrap() *Students {
	_tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Students is not a transactional entity")
	}
	s.config.driver = _tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Students) String() string {
	var builder strings.Builder
	builder.WriteString("Students(")
	builder.WriteString(fmt.Sprintf("id=%v, ", s.ID))
	builder.WriteString("name=")
	builder.WriteString(s.Name)
	builder.WriteString(", ")
	builder.WriteString("college=")
	builder.WriteString(s.College)
	builder.WriteString(", ")
	builder.WriteString("phone=")
	builder.WriteString(s.Phone)
	builder.WriteString(", ")
	builder.WriteString("subject=")
	builder.WriteString(s.Subject)
	builder.WriteString(", ")
	builder.WriteString("class=")
	builder.WriteString(s.Class)
	builder.WriteString(", ")
	builder.WriteString("identity=")
	builder.WriteString(s.Identity)
	builder.WriteByte(')')
	return builder.String()
}

// StudentsSlice is a parsable slice of Students.
type StudentsSlice []*Students
