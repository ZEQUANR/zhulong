// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/ZEQUANR/zhulong/ent/administrators"
)

// Administrators is the model entity for the Administrators schema.
type Administrators struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// College holds the value of the "college" field.
	College string `json:"college,omitempty"`
	// Phone holds the value of the "phone" field.
	Phone string `json:"phone,omitempty"`
	// Identity holds the value of the "identity" field.
	Identity     string `json:"identity,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Administrators) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case administrators.FieldID:
			values[i] = new(sql.NullInt64)
		case administrators.FieldName, administrators.FieldCollege, administrators.FieldPhone, administrators.FieldIdentity:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Administrators fields.
func (a *Administrators) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case administrators.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			a.ID = int(value.Int64)
		case administrators.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				a.Name = value.String
			}
		case administrators.FieldCollege:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field college", values[i])
			} else if value.Valid {
				a.College = value.String
			}
		case administrators.FieldPhone:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field phone", values[i])
			} else if value.Valid {
				a.Phone = value.String
			}
		case administrators.FieldIdentity:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field identity", values[i])
			} else if value.Valid {
				a.Identity = value.String
			}
		default:
			a.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Administrators.
// This includes values selected through modifiers, order, etc.
func (a *Administrators) Value(name string) (ent.Value, error) {
	return a.selectValues.Get(name)
}

// Update returns a builder for updating this Administrators.
// Note that you need to call Administrators.Unwrap() before calling this method if this Administrators
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *Administrators) Update() *AdministratorsUpdateOne {
	return NewAdministratorsClient(a.config).UpdateOne(a)
}

// Unwrap unwraps the Administrators entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (a *Administrators) Unwrap() *Administrators {
	_tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("ent: Administrators is not a transactional entity")
	}
	a.config.driver = _tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *Administrators) String() string {
	var builder strings.Builder
	builder.WriteString("Administrators(")
	builder.WriteString(fmt.Sprintf("id=%v, ", a.ID))
	builder.WriteString("name=")
	builder.WriteString(a.Name)
	builder.WriteString(", ")
	builder.WriteString("college=")
	builder.WriteString(a.College)
	builder.WriteString(", ")
	builder.WriteString("phone=")
	builder.WriteString(a.Phone)
	builder.WriteString(", ")
	builder.WriteString("identity=")
	builder.WriteString(a.Identity)
	builder.WriteByte(')')
	return builder.String()
}

// AdministratorsSlice is a parsable slice of Administrators.
type AdministratorsSlice []*Administrators
