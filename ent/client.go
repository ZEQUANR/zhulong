// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"github.com/ZEQUANR/zhulong/ent/migrate"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"github.com/ZEQUANR/zhulong/ent/administrators"
	"github.com/ZEQUANR/zhulong/ent/students"
	"github.com/ZEQUANR/zhulong/ent/teachers"
	"github.com/ZEQUANR/zhulong/ent/user"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Administrators is the client for interacting with the Administrators builders.
	Administrators *AdministratorsClient
	// Students is the client for interacting with the Students builders.
	Students *StudentsClient
	// Teachers is the client for interacting with the Teachers builders.
	Teachers *TeachersClient
	// User is the client for interacting with the User builders.
	User *UserClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Administrators = NewAdministratorsClient(c.config)
	c.Students = NewStudentsClient(c.config)
	c.Teachers = NewTeachersClient(c.config)
	c.User = NewUserClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:            ctx,
		config:         cfg,
		Administrators: NewAdministratorsClient(cfg),
		Students:       NewStudentsClient(cfg),
		Teachers:       NewTeachersClient(cfg),
		User:           NewUserClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:            ctx,
		config:         cfg,
		Administrators: NewAdministratorsClient(cfg),
		Students:       NewStudentsClient(cfg),
		Teachers:       NewTeachersClient(cfg),
		User:           NewUserClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Administrators.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Administrators.Use(hooks...)
	c.Students.Use(hooks...)
	c.Teachers.Use(hooks...)
	c.User.Use(hooks...)
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	c.Administrators.Intercept(interceptors...)
	c.Students.Intercept(interceptors...)
	c.Teachers.Intercept(interceptors...)
	c.User.Intercept(interceptors...)
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *AdministratorsMutation:
		return c.Administrators.mutate(ctx, m)
	case *StudentsMutation:
		return c.Students.mutate(ctx, m)
	case *TeachersMutation:
		return c.Teachers.mutate(ctx, m)
	case *UserMutation:
		return c.User.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// AdministratorsClient is a client for the Administrators schema.
type AdministratorsClient struct {
	config
}

// NewAdministratorsClient returns a client for the Administrators from the given config.
func NewAdministratorsClient(c config) *AdministratorsClient {
	return &AdministratorsClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `administrators.Hooks(f(g(h())))`.
func (c *AdministratorsClient) Use(hooks ...Hook) {
	c.hooks.Administrators = append(c.hooks.Administrators, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `administrators.Intercept(f(g(h())))`.
func (c *AdministratorsClient) Intercept(interceptors ...Interceptor) {
	c.inters.Administrators = append(c.inters.Administrators, interceptors...)
}

// Create returns a builder for creating a Administrators entity.
func (c *AdministratorsClient) Create() *AdministratorsCreate {
	mutation := newAdministratorsMutation(c.config, OpCreate)
	return &AdministratorsCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Administrators entities.
func (c *AdministratorsClient) CreateBulk(builders ...*AdministratorsCreate) *AdministratorsCreateBulk {
	return &AdministratorsCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *AdministratorsClient) MapCreateBulk(slice any, setFunc func(*AdministratorsCreate, int)) *AdministratorsCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &AdministratorsCreateBulk{err: fmt.Errorf("calling to AdministratorsClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*AdministratorsCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &AdministratorsCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Administrators.
func (c *AdministratorsClient) Update() *AdministratorsUpdate {
	mutation := newAdministratorsMutation(c.config, OpUpdate)
	return &AdministratorsUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AdministratorsClient) UpdateOne(a *Administrators) *AdministratorsUpdateOne {
	mutation := newAdministratorsMutation(c.config, OpUpdateOne, withAdministrators(a))
	return &AdministratorsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AdministratorsClient) UpdateOneID(id int) *AdministratorsUpdateOne {
	mutation := newAdministratorsMutation(c.config, OpUpdateOne, withAdministratorsID(id))
	return &AdministratorsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Administrators.
func (c *AdministratorsClient) Delete() *AdministratorsDelete {
	mutation := newAdministratorsMutation(c.config, OpDelete)
	return &AdministratorsDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AdministratorsClient) DeleteOne(a *Administrators) *AdministratorsDeleteOne {
	return c.DeleteOneID(a.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AdministratorsClient) DeleteOneID(id int) *AdministratorsDeleteOne {
	builder := c.Delete().Where(administrators.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AdministratorsDeleteOne{builder}
}

// Query returns a query builder for Administrators.
func (c *AdministratorsClient) Query() *AdministratorsQuery {
	return &AdministratorsQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAdministrators},
		inters: c.Interceptors(),
	}
}

// Get returns a Administrators entity by its id.
func (c *AdministratorsClient) Get(ctx context.Context, id int) (*Administrators, error) {
	return c.Query().Where(administrators.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AdministratorsClient) GetX(ctx context.Context, id int) *Administrators {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *AdministratorsClient) Hooks() []Hook {
	return c.hooks.Administrators
}

// Interceptors returns the client interceptors.
func (c *AdministratorsClient) Interceptors() []Interceptor {
	return c.inters.Administrators
}

func (c *AdministratorsClient) mutate(ctx context.Context, m *AdministratorsMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AdministratorsCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AdministratorsUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AdministratorsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AdministratorsDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Administrators mutation op: %q", m.Op())
	}
}

// StudentsClient is a client for the Students schema.
type StudentsClient struct {
	config
}

// NewStudentsClient returns a client for the Students from the given config.
func NewStudentsClient(c config) *StudentsClient {
	return &StudentsClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `students.Hooks(f(g(h())))`.
func (c *StudentsClient) Use(hooks ...Hook) {
	c.hooks.Students = append(c.hooks.Students, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `students.Intercept(f(g(h())))`.
func (c *StudentsClient) Intercept(interceptors ...Interceptor) {
	c.inters.Students = append(c.inters.Students, interceptors...)
}

// Create returns a builder for creating a Students entity.
func (c *StudentsClient) Create() *StudentsCreate {
	mutation := newStudentsMutation(c.config, OpCreate)
	return &StudentsCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Students entities.
func (c *StudentsClient) CreateBulk(builders ...*StudentsCreate) *StudentsCreateBulk {
	return &StudentsCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *StudentsClient) MapCreateBulk(slice any, setFunc func(*StudentsCreate, int)) *StudentsCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &StudentsCreateBulk{err: fmt.Errorf("calling to StudentsClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*StudentsCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &StudentsCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Students.
func (c *StudentsClient) Update() *StudentsUpdate {
	mutation := newStudentsMutation(c.config, OpUpdate)
	return &StudentsUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *StudentsClient) UpdateOne(s *Students) *StudentsUpdateOne {
	mutation := newStudentsMutation(c.config, OpUpdateOne, withStudents(s))
	return &StudentsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *StudentsClient) UpdateOneID(id int) *StudentsUpdateOne {
	mutation := newStudentsMutation(c.config, OpUpdateOne, withStudentsID(id))
	return &StudentsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Students.
func (c *StudentsClient) Delete() *StudentsDelete {
	mutation := newStudentsMutation(c.config, OpDelete)
	return &StudentsDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *StudentsClient) DeleteOne(s *Students) *StudentsDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *StudentsClient) DeleteOneID(id int) *StudentsDeleteOne {
	builder := c.Delete().Where(students.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &StudentsDeleteOne{builder}
}

// Query returns a query builder for Students.
func (c *StudentsClient) Query() *StudentsQuery {
	return &StudentsQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeStudents},
		inters: c.Interceptors(),
	}
}

// Get returns a Students entity by its id.
func (c *StudentsClient) Get(ctx context.Context, id int) (*Students, error) {
	return c.Query().Where(students.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *StudentsClient) GetX(ctx context.Context, id int) *Students {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *StudentsClient) Hooks() []Hook {
	return c.hooks.Students
}

// Interceptors returns the client interceptors.
func (c *StudentsClient) Interceptors() []Interceptor {
	return c.inters.Students
}

func (c *StudentsClient) mutate(ctx context.Context, m *StudentsMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&StudentsCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&StudentsUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&StudentsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&StudentsDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Students mutation op: %q", m.Op())
	}
}

// TeachersClient is a client for the Teachers schema.
type TeachersClient struct {
	config
}

// NewTeachersClient returns a client for the Teachers from the given config.
func NewTeachersClient(c config) *TeachersClient {
	return &TeachersClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `teachers.Hooks(f(g(h())))`.
func (c *TeachersClient) Use(hooks ...Hook) {
	c.hooks.Teachers = append(c.hooks.Teachers, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `teachers.Intercept(f(g(h())))`.
func (c *TeachersClient) Intercept(interceptors ...Interceptor) {
	c.inters.Teachers = append(c.inters.Teachers, interceptors...)
}

// Create returns a builder for creating a Teachers entity.
func (c *TeachersClient) Create() *TeachersCreate {
	mutation := newTeachersMutation(c.config, OpCreate)
	return &TeachersCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Teachers entities.
func (c *TeachersClient) CreateBulk(builders ...*TeachersCreate) *TeachersCreateBulk {
	return &TeachersCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *TeachersClient) MapCreateBulk(slice any, setFunc func(*TeachersCreate, int)) *TeachersCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &TeachersCreateBulk{err: fmt.Errorf("calling to TeachersClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*TeachersCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &TeachersCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Teachers.
func (c *TeachersClient) Update() *TeachersUpdate {
	mutation := newTeachersMutation(c.config, OpUpdate)
	return &TeachersUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TeachersClient) UpdateOne(t *Teachers) *TeachersUpdateOne {
	mutation := newTeachersMutation(c.config, OpUpdateOne, withTeachers(t))
	return &TeachersUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TeachersClient) UpdateOneID(id int) *TeachersUpdateOne {
	mutation := newTeachersMutation(c.config, OpUpdateOne, withTeachersID(id))
	return &TeachersUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Teachers.
func (c *TeachersClient) Delete() *TeachersDelete {
	mutation := newTeachersMutation(c.config, OpDelete)
	return &TeachersDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TeachersClient) DeleteOne(t *Teachers) *TeachersDeleteOne {
	return c.DeleteOneID(t.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *TeachersClient) DeleteOneID(id int) *TeachersDeleteOne {
	builder := c.Delete().Where(teachers.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TeachersDeleteOne{builder}
}

// Query returns a query builder for Teachers.
func (c *TeachersClient) Query() *TeachersQuery {
	return &TeachersQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeTeachers},
		inters: c.Interceptors(),
	}
}

// Get returns a Teachers entity by its id.
func (c *TeachersClient) Get(ctx context.Context, id int) (*Teachers, error) {
	return c.Query().Where(teachers.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TeachersClient) GetX(ctx context.Context, id int) *Teachers {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *TeachersClient) Hooks() []Hook {
	return c.hooks.Teachers
}

// Interceptors returns the client interceptors.
func (c *TeachersClient) Interceptors() []Interceptor {
	return c.inters.Teachers
}

func (c *TeachersClient) mutate(ctx context.Context, m *TeachersMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&TeachersCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&TeachersUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&TeachersUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&TeachersDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Teachers mutation op: %q", m.Op())
	}
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `user.Intercept(f(g(h())))`.
func (c *UserClient) Intercept(interceptors ...Interceptor) {
	c.inters.User = append(c.inters.User, interceptors...)
}

// Create returns a builder for creating a User entity.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UserClient) MapCreateBulk(slice any, setFunc func(*UserCreate, int)) *UserCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UserCreateBulk{err: fmt.Errorf("calling to UserClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UserCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id int) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserClient) DeleteOneID(id int) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUser},
		inters: c.Interceptors(),
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id int) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id int) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}

// Interceptors returns the client interceptors.
func (c *UserClient) Interceptors() []Interceptor {
	return c.inters.User
}

func (c *UserClient) mutate(ctx context.Context, m *UserMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown User mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		Administrators, Students, Teachers, User []ent.Hook
	}
	inters struct {
		Administrators, Students, Teachers, User []ent.Interceptor
	}
)
