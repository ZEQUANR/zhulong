// Code generated by ent, DO NOT EDIT.

package operationlog

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the operationlog type in the database.
	Label = "operation_log"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldContext holds the string denoting the context field in the database.
	FieldContext = "context"
	// FieldTime holds the string denoting the time field in the database.
	FieldTime = "time"
	// EdgeOperator holds the string denoting the operator edge name in mutations.
	EdgeOperator = "operator"
	// Table holds the table name of the operationlog in the database.
	Table = "operation_logs"
	// OperatorTable is the table that holds the operator relation/edge.
	OperatorTable = "operation_logs"
	// OperatorInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	OperatorInverseTable = "users"
	// OperatorColumn is the table column denoting the operator relation/edge.
	OperatorColumn = "user_operating_record"
)

// Columns holds all SQL columns for operationlog fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldStatus,
	FieldContext,
	FieldTime,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "operation_logs"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"user_operating_record",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultTime holds the default value on creation for the "time" field.
	DefaultTime func() time.Time
)

// OrderOption defines the ordering options for the OperationLog queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByContext orders the results by the context field.
func ByContext(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldContext, opts...).ToFunc()
}

// ByTime orders the results by the time field.
func ByTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTime, opts...).ToFunc()
}

// ByOperatorField orders the results by operator field.
func ByOperatorField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOperatorStep(), sql.OrderByField(field, opts...))
	}
}
func newOperatorStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OperatorInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, OperatorTable, OperatorColumn),
	)
}
