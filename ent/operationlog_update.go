// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ZEQUANR/zhulong/ent/operationlog"
	"github.com/ZEQUANR/zhulong/ent/predicate"
	"github.com/ZEQUANR/zhulong/ent/user"
)

// OperationLogUpdate is the builder for updating OperationLog entities.
type OperationLogUpdate struct {
	config
	hooks    []Hook
	mutation *OperationLogMutation
}

// Where appends a list predicates to the OperationLogUpdate builder.
func (olu *OperationLogUpdate) Where(ps ...predicate.OperationLog) *OperationLogUpdate {
	olu.mutation.Where(ps...)
	return olu
}

// SetName sets the "name" field.
func (olu *OperationLogUpdate) SetName(s string) *OperationLogUpdate {
	olu.mutation.SetName(s)
	return olu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (olu *OperationLogUpdate) SetNillableName(s *string) *OperationLogUpdate {
	if s != nil {
		olu.SetName(*s)
	}
	return olu
}

// SetStatus sets the "status" field.
func (olu *OperationLogUpdate) SetStatus(i int) *OperationLogUpdate {
	olu.mutation.ResetStatus()
	olu.mutation.SetStatus(i)
	return olu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (olu *OperationLogUpdate) SetNillableStatus(i *int) *OperationLogUpdate {
	if i != nil {
		olu.SetStatus(*i)
	}
	return olu
}

// AddStatus adds i to the "status" field.
func (olu *OperationLogUpdate) AddStatus(i int) *OperationLogUpdate {
	olu.mutation.AddStatus(i)
	return olu
}

// SetContext sets the "context" field.
func (olu *OperationLogUpdate) SetContext(s string) *OperationLogUpdate {
	olu.mutation.SetContext(s)
	return olu
}

// SetNillableContext sets the "context" field if the given value is not nil.
func (olu *OperationLogUpdate) SetNillableContext(s *string) *OperationLogUpdate {
	if s != nil {
		olu.SetContext(*s)
	}
	return olu
}

// ClearContext clears the value of the "context" field.
func (olu *OperationLogUpdate) ClearContext() *OperationLogUpdate {
	olu.mutation.ClearContext()
	return olu
}

// SetTime sets the "time" field.
func (olu *OperationLogUpdate) SetTime(t time.Time) *OperationLogUpdate {
	olu.mutation.SetTime(t)
	return olu
}

// SetNillableTime sets the "time" field if the given value is not nil.
func (olu *OperationLogUpdate) SetNillableTime(t *time.Time) *OperationLogUpdate {
	if t != nil {
		olu.SetTime(*t)
	}
	return olu
}

// SetOperatorID sets the "operator" edge to the User entity by ID.
func (olu *OperationLogUpdate) SetOperatorID(id int) *OperationLogUpdate {
	olu.mutation.SetOperatorID(id)
	return olu
}

// SetNillableOperatorID sets the "operator" edge to the User entity by ID if the given value is not nil.
func (olu *OperationLogUpdate) SetNillableOperatorID(id *int) *OperationLogUpdate {
	if id != nil {
		olu = olu.SetOperatorID(*id)
	}
	return olu
}

// SetOperator sets the "operator" edge to the User entity.
func (olu *OperationLogUpdate) SetOperator(u *User) *OperationLogUpdate {
	return olu.SetOperatorID(u.ID)
}

// Mutation returns the OperationLogMutation object of the builder.
func (olu *OperationLogUpdate) Mutation() *OperationLogMutation {
	return olu.mutation
}

// ClearOperator clears the "operator" edge to the User entity.
func (olu *OperationLogUpdate) ClearOperator() *OperationLogUpdate {
	olu.mutation.ClearOperator()
	return olu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (olu *OperationLogUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, olu.sqlSave, olu.mutation, olu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (olu *OperationLogUpdate) SaveX(ctx context.Context) int {
	affected, err := olu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (olu *OperationLogUpdate) Exec(ctx context.Context) error {
	_, err := olu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (olu *OperationLogUpdate) ExecX(ctx context.Context) {
	if err := olu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (olu *OperationLogUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(operationlog.Table, operationlog.Columns, sqlgraph.NewFieldSpec(operationlog.FieldID, field.TypeInt))
	if ps := olu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := olu.mutation.Name(); ok {
		_spec.SetField(operationlog.FieldName, field.TypeString, value)
	}
	if value, ok := olu.mutation.Status(); ok {
		_spec.SetField(operationlog.FieldStatus, field.TypeInt, value)
	}
	if value, ok := olu.mutation.AddedStatus(); ok {
		_spec.AddField(operationlog.FieldStatus, field.TypeInt, value)
	}
	if value, ok := olu.mutation.Context(); ok {
		_spec.SetField(operationlog.FieldContext, field.TypeString, value)
	}
	if olu.mutation.ContextCleared() {
		_spec.ClearField(operationlog.FieldContext, field.TypeString)
	}
	if value, ok := olu.mutation.Time(); ok {
		_spec.SetField(operationlog.FieldTime, field.TypeTime, value)
	}
	if olu.mutation.OperatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   operationlog.OperatorTable,
			Columns: []string{operationlog.OperatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := olu.mutation.OperatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   operationlog.OperatorTable,
			Columns: []string{operationlog.OperatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, olu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{operationlog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	olu.mutation.done = true
	return n, nil
}

// OperationLogUpdateOne is the builder for updating a single OperationLog entity.
type OperationLogUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OperationLogMutation
}

// SetName sets the "name" field.
func (oluo *OperationLogUpdateOne) SetName(s string) *OperationLogUpdateOne {
	oluo.mutation.SetName(s)
	return oluo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (oluo *OperationLogUpdateOne) SetNillableName(s *string) *OperationLogUpdateOne {
	if s != nil {
		oluo.SetName(*s)
	}
	return oluo
}

// SetStatus sets the "status" field.
func (oluo *OperationLogUpdateOne) SetStatus(i int) *OperationLogUpdateOne {
	oluo.mutation.ResetStatus()
	oluo.mutation.SetStatus(i)
	return oluo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (oluo *OperationLogUpdateOne) SetNillableStatus(i *int) *OperationLogUpdateOne {
	if i != nil {
		oluo.SetStatus(*i)
	}
	return oluo
}

// AddStatus adds i to the "status" field.
func (oluo *OperationLogUpdateOne) AddStatus(i int) *OperationLogUpdateOne {
	oluo.mutation.AddStatus(i)
	return oluo
}

// SetContext sets the "context" field.
func (oluo *OperationLogUpdateOne) SetContext(s string) *OperationLogUpdateOne {
	oluo.mutation.SetContext(s)
	return oluo
}

// SetNillableContext sets the "context" field if the given value is not nil.
func (oluo *OperationLogUpdateOne) SetNillableContext(s *string) *OperationLogUpdateOne {
	if s != nil {
		oluo.SetContext(*s)
	}
	return oluo
}

// ClearContext clears the value of the "context" field.
func (oluo *OperationLogUpdateOne) ClearContext() *OperationLogUpdateOne {
	oluo.mutation.ClearContext()
	return oluo
}

// SetTime sets the "time" field.
func (oluo *OperationLogUpdateOne) SetTime(t time.Time) *OperationLogUpdateOne {
	oluo.mutation.SetTime(t)
	return oluo
}

// SetNillableTime sets the "time" field if the given value is not nil.
func (oluo *OperationLogUpdateOne) SetNillableTime(t *time.Time) *OperationLogUpdateOne {
	if t != nil {
		oluo.SetTime(*t)
	}
	return oluo
}

// SetOperatorID sets the "operator" edge to the User entity by ID.
func (oluo *OperationLogUpdateOne) SetOperatorID(id int) *OperationLogUpdateOne {
	oluo.mutation.SetOperatorID(id)
	return oluo
}

// SetNillableOperatorID sets the "operator" edge to the User entity by ID if the given value is not nil.
func (oluo *OperationLogUpdateOne) SetNillableOperatorID(id *int) *OperationLogUpdateOne {
	if id != nil {
		oluo = oluo.SetOperatorID(*id)
	}
	return oluo
}

// SetOperator sets the "operator" edge to the User entity.
func (oluo *OperationLogUpdateOne) SetOperator(u *User) *OperationLogUpdateOne {
	return oluo.SetOperatorID(u.ID)
}

// Mutation returns the OperationLogMutation object of the builder.
func (oluo *OperationLogUpdateOne) Mutation() *OperationLogMutation {
	return oluo.mutation
}

// ClearOperator clears the "operator" edge to the User entity.
func (oluo *OperationLogUpdateOne) ClearOperator() *OperationLogUpdateOne {
	oluo.mutation.ClearOperator()
	return oluo
}

// Where appends a list predicates to the OperationLogUpdate builder.
func (oluo *OperationLogUpdateOne) Where(ps ...predicate.OperationLog) *OperationLogUpdateOne {
	oluo.mutation.Where(ps...)
	return oluo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (oluo *OperationLogUpdateOne) Select(field string, fields ...string) *OperationLogUpdateOne {
	oluo.fields = append([]string{field}, fields...)
	return oluo
}

// Save executes the query and returns the updated OperationLog entity.
func (oluo *OperationLogUpdateOne) Save(ctx context.Context) (*OperationLog, error) {
	return withHooks(ctx, oluo.sqlSave, oluo.mutation, oluo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (oluo *OperationLogUpdateOne) SaveX(ctx context.Context) *OperationLog {
	node, err := oluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (oluo *OperationLogUpdateOne) Exec(ctx context.Context) error {
	_, err := oluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oluo *OperationLogUpdateOne) ExecX(ctx context.Context) {
	if err := oluo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (oluo *OperationLogUpdateOne) sqlSave(ctx context.Context) (_node *OperationLog, err error) {
	_spec := sqlgraph.NewUpdateSpec(operationlog.Table, operationlog.Columns, sqlgraph.NewFieldSpec(operationlog.FieldID, field.TypeInt))
	id, ok := oluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "OperationLog.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := oluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, operationlog.FieldID)
		for _, f := range fields {
			if !operationlog.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != operationlog.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := oluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := oluo.mutation.Name(); ok {
		_spec.SetField(operationlog.FieldName, field.TypeString, value)
	}
	if value, ok := oluo.mutation.Status(); ok {
		_spec.SetField(operationlog.FieldStatus, field.TypeInt, value)
	}
	if value, ok := oluo.mutation.AddedStatus(); ok {
		_spec.AddField(operationlog.FieldStatus, field.TypeInt, value)
	}
	if value, ok := oluo.mutation.Context(); ok {
		_spec.SetField(operationlog.FieldContext, field.TypeString, value)
	}
	if oluo.mutation.ContextCleared() {
		_spec.ClearField(operationlog.FieldContext, field.TypeString)
	}
	if value, ok := oluo.mutation.Time(); ok {
		_spec.SetField(operationlog.FieldTime, field.TypeTime, value)
	}
	if oluo.mutation.OperatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   operationlog.OperatorTable,
			Columns: []string{operationlog.OperatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oluo.mutation.OperatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   operationlog.OperatorTable,
			Columns: []string{operationlog.OperatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &OperationLog{config: oluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, oluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{operationlog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	oluo.mutation.done = true
	return _node, nil
}
